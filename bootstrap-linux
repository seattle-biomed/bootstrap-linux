#!/bin/bash
# Bootstraps a Linux machine for an initial Puppet run.
# Supports CentOS 5 and Ubuntu 12.04.
# Handles configuration of up to two IP addresses

function banner {
    echo
    echo "Usage (static IP addresses):"
    echo "    $0 [-m] -n fqdn -f eth0_IP [-b eth1_IP] [-p puppetmaster] -r ns1 [-s ns2]"
    echo
    echo "Usage (DHCP):"
    echo "    $0 [-m] -n fqdn -d [-p puppetmaster]"
    echo
    echo "Help:"
    echo "    $0 -h"
    exit 1
}

(
# Parse options:
ns2=''
eth1_ip=''
maintain_ip='off'
while getopts "hdmp:n:f:b:r:s:" flag
do
  case $flag in
    b) eth1_ip=$OPTARG ;;
    d) dhcp='on' ;;
    f) eth0_ip=$OPTARG ;;
    m) maintain_ip='on' ;;
    n) fqdn=$OPTARG ;;
    p) puppetmaster=$OPTARG ;;
    r) ns1=$OPTARG ;;
    s) ns2=$OPTARG ;;
    *) banner ;;
  esac
done

distro=$(cat /etc/issue | head -1 | cut -f1 -d " ")
hostname=$(echo ${fqdn} | sed 's/\..*$//')

# Check required arguments:
if [ `id -u` -ne 0 ] ; then
  echo "Re-run this script as root - this script modifies key system files."
  banner
fi

if [ -z $fqdn ] ; then
  echo "WARNING: No fully-qualified domain name given."
  fqdn=`hostname --fqdn`
  if [ "$fqdn" == 'ubuntu' -o "$fqdn" == 'centos' ] ; then
    echo "ERROR: System has default name and no name provided."
    banner
  fi
fi

if [ -z "$eth0_ip" -a -z "$dhcp" ] ; then
  echo "WARNING: No front-channel IP address given and DHCP not requested."
  eth0_ip=`/sbin/ifconfig eth0 2>/dev/null| grep "inet addr" | awk -F: '{print $2}' | awk '{print $1}'`
  if [ "$eth0_ip" == '' ] ; then
    echo "ERROR: Could not determine IP address of eth0 and none specified."
    banner
  fi
fi

if [ $distro == 'Ubuntu' -a -z "$ns1" -a -z "$dhcp" ] ; then
  echo "WARNING: No nameserver provided with static IP address"
  ns1=`grep nameserver /etc/resolv.conf|awk '{print $2}'`
  if [ "$ns1" == '' -o "$ns1" == '127.0.0.1' ] ; then
    echo "ERROR: No nameserver provided and none configured."
    banner
  fi
fi

# We are assuming that the netmask is 255.255.255.0 and the last octet of the
# gateway is .1.

netmask="255.255.255.0"

eth0_network=$(echo $eth0_ip | sed 's/\.[0-9]*$/.0/')
eth0_broadcast=$(echo $eth0_ip | sed 's/\.[0-9]*$/.255/')
eth0_gateway=$(echo $eth0_ip | sed 's/\.[0-9]*$/.1/')

eth1_network=$(echo $eth1_ip | sed 's/\.[0-9]*$/.0/')
eth1_broadcast=$(echo $eth1_ip | sed 's/\.[0-9]*$/.255/')

# Ping test gateway to check connectivity if not using DHCP:
if [ -z "$dhcp" ]; then
  /sbin/ifconfig eth0 inet $eth0_ip netmask 0xffffff00 up
  /bin/ping -c 1 $eth0_gateway 2>&1 > /dev/null
  if [ $? -ne 0 ] ; then
    echo "WARNING: Cannot ping default gateway. Is system connected to incorrect VLAN?"
#    exit 1
  fi
  /bin/ping -c 1 $ns1 2>&1 > /dev/null
  if [ $? -ne 0 ] ; then
    echo "ERROR: Cannot ping nameserver. Is $ns1 correct?"
    exit 1
  fi
fi

# Do distro specific actions:

case $distro in
CentOS)

hostname $fqdn

# Write /etc/sysconfig/network.

cat > /etc/sysconfig/network <<EOF
NETWORKING=yes
NETWORKING_IPV6=yes
HOSTNAME=${fqdn}
GATEWAY=${eth0_gateway}
EOF

# Write /etc/sysconfig/network-scripts/ifcfg-eth0.
if [ $dhcp == 'on' ]; then
cat > /etc/sysconfig/network-scripts/ifcfg-eth0 <<EOF
DEVICE=eth0
BOOTPROTO=dhcp
ONBOOT=yes
EOF
else
cat > /etc/sysconfig/network-scripts/ifcfg-eth0 <<EOF
DEVICE=eth0
BOOTPROTO=static
IPADDR=${eth0_ip}
NETMASK=${netmask}
ONBOOT=yes
EOF
fi

if [[ ${eth1_ip} != "" ]] ; then
cat > /etc/sysconfig/network-scripts/ifcfg-eth1 <<EOF
DEVICE=eth1
BOOTPROTO=static
IPADDR=${eth1_ip}
NETMASK=${netmask}
ONBOOT=yes
EOF
fi

if [ $maintain_ip == 'off' ]; then
    /etc/init.d/network restart
fi

# Install Puppet agent:
/bin/rpm -ivh http://yum.puppetlabs.com/el/5/products/i386/puppetlabs-release-5-6.noarch.rpm
/usr/bin/yum -y install puppet

;;
Ubuntu)

domain=`echo ${fqdn} | sed 's/^[^.]*\.//'`

if [ $dhcp == 'on' ]; then
cat > /etc/network/interfaces <<EOF
auto lo eth0
iface lo inet loopback

iface eth0 inet dhcp
  dns-search ${domain}
  dns-domain ${domain}
EOF
else
cat > /etc/network/interfaces <<EOF
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet static
  address ${eth0_ip}
  netmask ${netmask}
  network ${eth0_network}
  broadcast ${eth0_broadcast}
  gateway ${eth0_gateway}
  dns-nameservers ${ns1} ${ns2}
  dns-search ${domain}
  dns-domain ${domain}
EOF
fi

if [[ $eth1_ip != "" ]] ; then
  cat >> /etc/network/interfaces <<EOF

auto eth1
iface eth1 inet static
  address ${eth1_ip}
  netmask ${netmask}
  network ${eth1_network}
  broadcast ${eth1_broadcast}
EOF
fi

echo $hostname > /etc/hostname

if [ $maintain_ip == 'off' ]; then
    /usr/bin/killall dhclient3
    /etc/init.d/networking restart
fi

/bin/hostname -F /etc/hostname

PUPPET_URL='http://apt.puppetlabs.com/'
DISTRIB_CODENAME=`awk -F= '/^DISTRIB_CODENAME/ { print $2 }' /etc/lsb-release`
PUPPET_REPO="puppetlabs-release-$DISTRIB_CODENAME.deb"

# Install puppet agent:
curl --silent ${PUPPET_URL}/pubkey.gpg | apt-key add - > /dev/null
/usr/bin/wget -O /tmp/$PUPPET_REPO $PUPPET_URL/$PUPPET_REPO
if [ "$?" != "0" ]
  echo "ERROR: unable to get $PUPPET_URL/$PUPPET_REPO"
  exit 1
fi
/usr/bin/dpkg -i /tmp/$PUPPET_REPO

# Make apt-get install really really quietly.
APT_OPTS='-qq -y'
export DEBIAN_FRONTEND=noninteractive
echo 'Dpkg::Options{"--force-confdef";"--force-confold";}' >> /etc/apt/apt.conf.d/local

/usr/bin/apt-get update
/usr/bin/apt-get -y dist-upgrade
/usr/bin/apt-get -y install puppet

# Install additional packages:
/usr/bin/apt-get -y install git

;;
*)

echo "Distribution not supported - update script to support the distro you want to bootstrap."
exit 1

;;
esac

if [ ! -z "$puppetmaster" ] ; then
    cat > /etc/puppet/puppet.conf <<EOF
[main]
logdir=/var/log/puppet
vardir=/var/lib/puppet
ssldir=/var/lib/puppet/ssl
rundir=/var/run/puppet
factpath=\$vardir/lib/facter
templatedir=\$confdir/templates
server = $puppetmaster

[master]
# These are needed when the puppetmaster is run by passenger
# and can safely be removed if webrick is used.
ssl_client_header = SSL_CLIENT_S_DN
ssl_client_verify_header = SSL_CLIENT_VERIFY

EOF
fi

# Update /etc/hosts:
hosts_tmp=$(mktemp)
chmod 644 $hosts_tmp
echo "127.0.1.1 ${fqdn} ${hostname}" > $hosts_tmp
grep -v 127.0.1.1 /etc/hosts >> $hosts_tmp
mv $hosts_tmp /etc/hosts

echo "All done!"
) 2>&1 | /usr/bin/tee /root/bootstrap-linux.log
