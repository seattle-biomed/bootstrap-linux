#!/bin/bash
# Bootstraps a Linux machine for an initial Puppet run.
# Supports CentOS 5 and Ubuntu 12.04.
#
# 2013.07.17 - apowers : significant rewrite, better error checking and help,
#             prompts for missing prameters,
#             remove secondary interface configuration
#
function banner {
    echo
    echo "Usage (static IP addresses):"
    echo "    $0 [-k] -n fqdn [-f eth0_IP|-d] [-p puppetmaster] -r ns1 [-s ns2]"
    echo
    echo "  -k              : regenerate SSH host keys"
    echo "  -n fqdn         : fully-qualifed host name"
    echo "  -f eth0_ip      : IP address for eth0 interface"
    echo "  -d              : use DHCP to configure eth0"
    echo "  -p puppetmaster : name of the puppetmaster, defaults to 'puppet'"
    echo "  -r ns1          : IP address of primary DNS server"
    echo "  -s ns1          : IP address of secondary DNS server"
    echo
    echo "This script assumes a /24 network with the gateway at .1"
    echo "Hostname and IP address must be manually registered in DNS."
    echo
    exit 1
}

#========================================================================
# Parse options:
ns2=''
eth1_ip=''
puppetmaster='puppet'

while getopts "hdmkp:n:f:b:r:s:" flag
do
  case $flag in
    b) eth1_ip=$OPTARG ;;
    d) dhcp=1 ;;
    f) eth0_ip=$OPTARG ;;
    k) ssh_keygen=1;;
    n) fqdn=$OPTARG ;;
    p) puppetmaster=$OPTARG ;;
    r) ns1=$OPTARG ;;
    s) ns2=$OPTARG ;;
    *) banner ;;
  esac
done

distro=$(cat /etc/issue | head -1 | cut -f1 -d " ")
hostname=$(echo ${fqdn} | sed 's/\..*$//')

PUPPET_URL='http://apt.puppetlabs.com/'
DISTRIB_CODENAME=`awk -F= '/^DISTRIB_CODENAME/ {print $2}' /etc/lsb-release`
PUPPET_REPO="puppetlabs-release-$DISTRIB_CODENAME.deb"

[[ -z $puppetmaster ]] && puppetmaster='puppet'

# Check required arguments:
if [ `id -u` -ne 0 ] ; then
  echo "Re-run this script as root - this script modifies key system files."
  banner
fi

if [ $distro == 'Ubuntu' -a -z "$ns1" -a -z "$dhcp" ] ; then
  echo "INFO: No nameserver provided with static IP address."
  echo -n "      Using nameservers from resolv.conf: "
  ns1=`grep nameserver /etc/resolv.conf|head -n1|awk '{print $2}'`
  echo $ns1
  while [ "$ns1" == '' -o "$ns1" == '127.0.0.1' ] ; do
    echo "WARNING: No nameserver provided."
    echo -n "Enter nameserver IP address: " ; read ns1
  done
fi

if [ -z $fqdn ] ; then
  echo "INFO: No fully-qualified domain name given."
  echo -n "      Using current hostname: "
  fqdn=`hostname --fqdn`
  echo $fqdn
  hostname=$(echo $fqdn|awk -F. '{print $1}')
  while [ "$hostname" == '' -o "$hostname" == 'ubuntu' -o "$hostname" == 'centos' ] ; do
    echo "WARNING: System has default name."
    echo -n "Enter fully-qualified host name: " ; read fqdn
  done
fi

if [ -z "$eth0_ip" -a -z "$dhcp" ] ; then
  echo "INFO: No IP address given and DHCP not requested."
  echo -n "      Using IP address configured on eth0: "
  eth0_ip=`/sbin/ifconfig eth0 2>/dev/null|grep "inet addr"|awk -F: '{print $2}'|awk '{print $1}'`
  echo $eth0_ip
# The 250 address is reserved for build templates
  if echo $eth0_ip|egrep -q '\.250$' ; then eth0_ip='' ; fi
  until echo $eth0_ip|egrep -q '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' ; do
    echo "WARNING: Invalid IP address for eth0."
    echo -n "Enter host IP address or 'dhcp': " ; read eth0_ip
    if [ "$eth0_ip" == 'dhcp' ] ; then dhcp=1 ; break ; fi
  done
fi

# Configure static interface address
if [ -z "$dhcp" ]; then
  netmask="255.255.255.0"
  eth0_network=$(echo $eth0_ip | sed 's/\.[0-9]*$/.0/')
  eth0_broadcast=$(echo $eth0_ip | sed 's/\.[0-9]*$/.255/')
  eth0_gateway=$(echo $eth0_ip | sed 's/\.[0-9]*$/.1/')

  /bin/ping -c 1 $eth0_gateway 2>&1 > /dev/null
  if [ $? -ne 0 ] ; then
    echo "WARNING: Cannot ping default gateway ($eth0_gateway)."
  fi
  /bin/ping -c 1 $ns1 2>&1 > /dev/null
  if [ $? -ne 0 ] ; then
    echo "ERROR: Cannot ping nameserver. Is $ns1 correct?"
    exit=1
  fi
  if [ $exit ] ; then exit $exit ; fi
fi

#=====================================================================
function build_centos {

# Write /etc/sysconfig/network.
cat > /etc/sysconfig/network <<EOF
NETWORKING=yes
NETWORKING_IPV6=yes
HOSTNAME=${fqdn}
GATEWAY=${eth0_gateway}
EOF

# Write /etc/sysconfig/network-scripts/ifcfg-eth0.
if [ $dhcp ]; then
cat > /etc/sysconfig/network-scripts/ifcfg-eth0 <<EOF
DEVICE=eth0
BOOTPROTO=dhcp
ONBOOT=yes
EOF
else
cat > /etc/sysconfig/network-scripts/ifcfg-eth0 <<EOF
DEVICE=eth0
BOOTPROTO=static
IPADDR=${eth0_ip}
NETMASK=${netmask}
ONBOOT=yes
EOF
fi

# Install Puppet agent:
    PUPPET_URL="http://yum.puppetlabs.com/el/6/products/x86_64";
#TODO: find a way to automatically detecte this repo name.
    PUPPET_REPO="puppetlabs-release-6-7.noarch.rpm";
    /usr/bin/wget -O /tmp/$PUPPET_REPO $PUPPET_URL/$PUPPET_REPO 2>&1 >/dev/null;
    rpm -ivh /tmp/$PUPPET_REPO
    /usr/bin/yum -y -q install puppet

}

#=====================================================================
function build_ubuntu {

if [ $dhcp ]; then
cat > /etc/network/interfaces <<EOF
auto lo eth0
iface lo inet loopback
iface eth0 inet dhcp
EOF
else
cat > /etc/network/interfaces <<EOF
# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet static
  address ${eth0_ip}
  netmask ${netmask}
  gateway ${eth0_gateway}
EOF
fi

# Built a real resolv.conf without dnsmasq
domain=`echo ${fqdn} | sed 's/^[^.]*\.//'`
rm /etc/resolv.conf
cat > /etc/resolv.conf << EOF
domain ${domain}
search ${domain}
nameserver ${ns1}
EOF
if [ ! -z "$ns2" ] ; then
  echo "nameserver ${ns2}" >> /etc/resolv.conf
fi

# Install puppet
curl --silent ${PUPPET_URL}/pubkey.gpg | apt-key add - > /dev/null
/usr/bin/dpkg -i /tmp/$PUPPET_REPO

# Make apt-get install really really silently.
APT_OPTS='-qq -y'
export DEBIAN_FRONTEND=noninteractive
echo 'Dpkg::Options{"--force-confdef";"--force-confold";}' >> /etc/apt/apt.conf.d/local

/usr/bin/apt-get $APT_OPTS update
#/usr/bin/apt-get $APT_OPTS dist-upgrade
/usr/bin/apt-get $APT_OPTS install puppet

echo "START=yes" > /etc/default/puppet

# Regenerate SSH keys if necessary
/usr/sbin/dpkg-reconfigure openssh-server

}

#=====================================================================
# Do distro specific actions:

hostname $fqdn
echo $hostname > /etc/hostname

# Regenerate SSH keys if necessary
/usr/bin/ssh-keygen -A

# Download puppet
/usr/bin/wget -O /tmp/$PUPPET_REPO $PUPPET_URL/$PUPPET_REPO
if [ "$?" != "0" ]; then
  echo "ERROR: unable to get $PUPPET_URL/$PUPPET_REPO"
  exit 1
fi

case $distro in
CentOS) build_centos ;;
Ubuntu) build_ubuntu ;;
*)
echo "Distribution not supported - update script to support the distro you want to bootstrap."
exit 1
;;
esac

if [ $ssh_keygen ] ; then
  rm /etc/ssh/ssh_host*key*
  ssh-keygen -A
fi

cat > /etc/puppet/puppet.conf <<EOF
[main]
logdir=/var/log/puppet
vardir=/var/lib/puppet
ssldir=/var/lib/puppet/ssl
rundir=/var/run/puppet
factpath=\$vardir/lib/facter
templatedir=\$confdir/templates
server=$puppetmaster
pluginsync=true

[master]

[agent]

EOF

# Update /etc/hosts:
hosts_tmp=$(mktemp)
chmod 644 $hosts_tmp
echo "127.0.1.1 ${fqdn} ${hostname}" > $hosts_tmp
grep -v 127.0.1.1 /etc/hosts >> $hosts_tmp
mv $hosts_tmp /etc/hosts

# Run puppet as a service

echo "All done!"
echo "Start puppet: 'puppet agent -t'"
echo "And sign the host certificate on the puppet master."
